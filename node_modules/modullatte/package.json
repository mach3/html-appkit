{
  "name": "modullatte",
  "version": "1.0.4",
  "description": "Simple HTML module tool",
  "main": "./lib/modullatte.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mach3/modullatte.git"
  },
  "keywords": [
    "HTML",
    "template",
    "module"
  ],
  "author": {
    "name": "mach3",
    "url": "http://www.mach3.jp"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "\n# Modullatte\n\n## これはなに\n\nDreamweaverのライブラリ機能に似た挙動をする、node.jsベースのHTMLのモジュールツールです。\nGruntタスクとして利用できます。\n\n## 主な機能\n\n- #module コメントで括られた箇所に、該当するモジュールHTMLを読み込みこんで保存します\n- モジュール内の相対パスを書き換えます\n- 仕上げにHTMLを自動整形するオプションがあります（ [einars/js-beautify](https://github.com/einars/js-beautify) )\n- 自動整形のオプションがオフの場合は、インデントのみあわせて挿入します\n\n## インストール\n\n```\nnpm install modullatte\n```\n\n## HTMLモジュールの例\n\n次のようにファイルが配置されていると想定します。\n\n```\nroot/\n├ public_html/\n│ ├ modules/\n│ │ ├ navi.html\n│ │ └ ...\n│ ├ index.html\n│ └ ...\n└ Gruntfiles.js\n```\n\n### モジュールを読み込む\n\n- navi.html \n\n```html\n<ul>\n\t<li><a href=\"../foo.html\">foo</a></li>\n\t...\n</ul>\n```\n\n- index.html\n\n```html\n<!-- #module \"./modules/navi.html\" -->\n<!-- /#module -->\n```\n\nindex.htmlに対してModullatteを実行すると、次のように展開されます。\n\n```html\n<!-- #module \"./modules/navi.html\" -->\n<ul>\n\t<li><a href=\"foo.html\">foo</a></li>\n\t...\n</ul>\n<!-- /#module -->\n```\n\nモジュールを編集したら、再度Modullatteを実行すればHTMLが更新されます。\n\n\n## Gruntタスク\n\n```javascript\ngrunt.loadNpmTasks(\"modullatte\");\n\ngrunt.initConfig({\n\tmodullatte : {\n\t\toptions : {\n\t\t\tverbose : true,\n\t\t\tignore : true,\n\t\t\tignore_names : [\"^_\"]\n\t\t},\n\t\tdist : {\n\t\t\tsrc : [\n\t\t\t\t\"public_html/**/*.html\"\n\t\t\t]\n\t\t}\n\t}\n});\n```\n\n尚、該当のファイルをそのまま上書きしますのでご注意ください。\n複製したファイルを扱うか、事前のバックアップをお勧めします。\n（modullatteを使用する事によりファイルが破損しても一切責任は負いかねます）\n\n\n### オプション\n\n- beautify : Boolean (false) - js_beautifyを使用してHTMLの整形を行う・行わない\n- verbose : Boolean (true) - 詳細ログを出力する\n- ignore : Boolean (true) - ignore_names にマッチするファイルを無視する\n- ignore_names : Array|String ([\"^_\"]) - 無視するファイル名のパターンを指定する\n\n上記以外のオプションは [js-beautify](https://github.com/einars/js-beautify) のbeautify-html.jsへ渡す為のオプションです。\n個人的な好みにより、インデントの初期値だけ違います。\n\n- indent_size : Integer (1)\n- indent_char : String (\"\\t\")\n- max_char : Integer (250)\n- brace_style : String (\"collapse\") - \"collapse\" | \"expand\" | \"end-expand\"\n- indent_scripts : String (\"normal\") - \"keep\"|\"separate\"|\"normal\"\n\n## Grunt以外で使う例\n\nライブラリを利用して使う場合はファイルの上書きは行われません。\n変わりに、生成した結果のHTML文字列が返されます。\n\n### buildメソッドを使用する\n\nbuild() メソッドで結果を返します。\n\n```javascript\nvar modullatte = require(\"modullatte\");\n\nvar result = modullatte.build(\"./the/path/to/file.html\", { /* options */ });\n```\n\n### インスタンスを使用する\n\ncreate() でインスタンスを返します。validate() ではmodullatteのタグが正常かどうかを検証し、\nbuild() で結果が返ります。\n\n```javascript\nvar modullatte = require(\"modullatte\");\n\nvar instance = modullatte.create(\"./the/path/to/file.html\", { /* options */ });\nmodullatte.validate(function(error, instance){\n\tif(! error){\n\t\tconsole.log(instance.build());\n\t}\n});\n```\n\nオプションは、前項の物のうち、下記の物を指定出来ます。  \nbeautify, indent_size, indent_char, max_char, brace_style, indent_scripts\n\n\n\n## 作者\n\nmach3\n\n- [Website](http://www.mach3.jp)\n- [Blog](http://blog.mach3.jp)\n- [Twitter](http://twitter.com/mach3ss)\n",
  "bugs": {
    "url": "https://github.com/mach3/modullatte/issues"
  },
  "_id": "modullatte@1.0.4",
  "_from": "modullatte@*"
}
